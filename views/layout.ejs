
<!DOCYPE html>
<html ng-app="StarterApp">
  <head>
    <title>AXA Motor Insurance</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/angular-material.min.css">
    <link rel="stylesheet" href="/styles/icomoon/demo-files/demo.css">
    <link rel="stylesheet" href="/styles/icomoon/style.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/styles.css">
    <!--STYLES END-->

    <!--
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=RobotoDraft:300,400,500,700,400italic">-->

    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"

  </head>

  <body ng-cloak >
  <div layout="column" >
    <md-toolbar layout="row" style="background-color:white;height:7%;">
      <div class="md-toolbar-tools" >
          <div flex="30">
            <span><img src="/images/axa_logo.jpg"  style=" padding-top: 20px;padding-left: 30px;padding-bottom: 20px; height: 70px;"></span>
          </div>
        <div flex="50"></div>
          <div flex="20">
            <md-input-container class="agentcode" flex-gt-sm>
              <label>Agent Code</label>
              <input ng-model="user.agentcode">
            </md-input-container>
        </div>
      </div>
    </md-toolbar>
    <div ng-view></div>
  </div>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    </div>
    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular.min.js"></script>
    <script src="/js/dependencies/angular-sails.min.js"></script>
    <script src="/js/dependencies/angular-animate.min.js"></script>
    <script src="/js/dependencies/angular-aria.min.js"></script>
    <script src="/js/dependencies/angular-material.min.js"></script>
    <script src="/js/dependencies/algoliasearch.angular.min.js"></script>
    <script src="/js/dependencies/angular-messages.min.js"></script>
    <script src="/js/dependencies/angular-route.min.js"></script>
    <script src="/js/dependencies/gtom-sdk.js"></script>
    <script src="/js/dependencies/moment.min.js"></script>
    <script src="/js/dependencies/underscore-min.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/controllers/AppCtrl.js"></script>
    <script src="/js/controllers/addonCtrl.js"></script>
    <script src="/js/controllers/offerCtrl.js"></script>
    <script src="/js/controllers/policyCtrl.js"></script>
    <script src="/js/services/marketingFactory.js"></script>
    <script src="/js/services/offerFactory.js"></script>
    <script src="/js/services/planFactory.js"></script>
    <script src="/js/services/policyFactory.js"></script>
    <script src="/js/services/productFactory.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
